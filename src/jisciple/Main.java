package jisciple;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.Timer;
import java.util.TimerTask;

import jisciple.iso8583.config.IsoConfigConverter;
import jisciple.iso8583.config.MensagemIsoConfig;
import jisciple.iso8583.config.iso.OldIsoConfig;
import jisciple.iso8583.config.iso.OldIsoConfigStructure;
import jisciple.iso8583.config.sizeheader.SizeHeaderConfig;
import jisciple.iso8583.config.sizeheader.TcpConfig;
import jisciple.iso8583.util.Util;
import jisciple.iso8583.util.YamlReader;
import jisciple.server.RebatedorServer;

public class Main {

	public static final int PORT = 6666;

	public static void main(String[] args) {

		MensagemIsoConfig isoConfig;
		SizeHeaderConfig headerConfig;
		String teste1 = "030549534f303236303030303130303230304232333843343831323845333830314130303030303030303130303030303139303030303330303030303030303030333030303132373134313431343039343633363039313435363031323730313237343133313035313030313131303030303030303039303337343535393836303033393737343131363d323031303230313138343232363530303030303030303032373030303030313530303044463034342020202020202020303120203031313931383734352020454b544543202020202020202020202020202020202041524d454e4941202020202020363320434f30333630303030303030303030303030303030303030303030303030303030303030303030303030323730313139313837343520202020202020202020303030303030303031373030313630303930544553322bd303030303030303030303030303030303030303030303030303030303030303030313130303030303030303030303030392020202020202020203031322020423234204232342031203033343046423430303030303030303003";
		// String teste2 =
		

		final byte[] dump = Util.asciiToBytes(teste1.getBytes());

		System.out.println(new String(dump));

		try {

			OldIsoConfig oldConfig = YamlReader.readConfig("config/iso.yml", OldIsoConfigStructure.class).getIso();
			isoConfig = IsoConfigConverter.convert(oldConfig);

			headerConfig = YamlReader.readConfig("config/size-header.yml", TcpConfig.class).getSizeHeader();

//			MensagemIso iso = MensagemIsoParser.parseIso(dump, isoConfig, headerConfig);
//			System.out.println(iso.prettyPrint());

			RebatedorServer server = new RebatedorServer(isoConfig, headerConfig, PORT); // cria numa thread separada
			server.start();

			TimerTask t = new TimerTask() {
				@Override
				public void run() {
					try {
						Socket socket = new Socket("127.0.0.1", PORT);
						InputStream is = socket.getInputStream();
						DataOutputStream os = new DataOutputStream(socket.getOutputStream());
						os.write(dump);
						os.flush();
						os.close();
						is.close();
						socket.close();

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			};

			new Timer().schedule(t, 2000);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}
